{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FBotics: The Python Client for Facebook Send API Overview FBotics is a Python client for Facebook Send API. The Send API is the main API used to send messages to users, including text, attachments, structured message templates, sender actions, and more. The goal of this project is to privide a clean and professional client, which can be used in production environments. For this, each new functionality added will be fully tested and documented. Currently this project is under development and offers a limited set of features of the Facebook Send API. Getting started First create an instance of the client with the access token of your Facebook page: from fbotics import Client client = Client(page_access_token=\"EAAHIhFHZCIQIBAAme5oAtHehYfrZCvyUZAMLABGEW8ZBmdZASYFp8wdhtbD3POKbT7m3yOnue9Y2JrYZAZBSVne0yHfdKKKfxrjL1aZB5nFCWVjBZA7BiZBNsMrVhSZCfqi4cB6CZCi2CUh41waGNlIc7gcFxAl421dqoNBUPD5ZAjxiHrAJmDRdYx8ATJRBkRqRhowMZD\") Sending a Text Message client.send_message(recipient_id=\"2157136727638083\", text=\"hello world!\") Sending Quick Replies from fbotics.models.quick_reply import QuickReply qr1 = QuickReply({\"content_type\": \"text\", \"title\": \"Yes\", \"payload\": \"payload1\", \"image_url\": \"http://i64.tinypic.com/1hothh.png\"}) qr2 = QuickReply({\"content_type\": \"text\", \"title\": \"No\", \"payload\": \"payload2\", \"image_url\": \"http://i63.tinypic.com/2pqpbth.png\"}) quick_replies = [qr1, qr2] response = client.send_message( recipient_id=2157136727638083, text=\"Text Message with Quick Replies\", quick_replies=quick_replies) Installation You can install the latest version of FBotics using pip: pip install fbotics You can also install FBotics from GitHub source: First, clone FBotics using git : git clone git@github.com:pasmod/fbotics.git Then, cd to the project folder and run the install command: cd fbotics pip install . Development & Testing Before developing FBotics further, please install Docker. For building the Docker image and installing all dependencies of FBotics, run: cd fbotics make build Then execute the following command to run all the components required to work on FBotics: cd fbotics make up To execute the tests: make test To create coverage report: make coverage","title":"Home"},{"location":"#fbotics-the-python-client-for-facebook-send-api","text":"","title":"FBotics: The Python Client for Facebook Send API"},{"location":"#overview","text":"FBotics is a Python client for Facebook Send API. The Send API is the main API used to send messages to users, including text, attachments, structured message templates, sender actions, and more. The goal of this project is to privide a clean and professional client, which can be used in production environments. For this, each new functionality added will be fully tested and documented. Currently this project is under development and offers a limited set of features of the Facebook Send API.","title":"Overview"},{"location":"#getting-started","text":"First create an instance of the client with the access token of your Facebook page: from fbotics import Client client = Client(page_access_token=\"EAAHIhFHZCIQIBAAme5oAtHehYfrZCvyUZAMLABGEW8ZBmdZASYFp8wdhtbD3POKbT7m3yOnue9Y2JrYZAZBSVne0yHfdKKKfxrjL1aZB5nFCWVjBZA7BiZBNsMrVhSZCfqi4cB6CZCi2CUh41waGNlIc7gcFxAl421dqoNBUPD5ZAjxiHrAJmDRdYx8ATJRBkRqRhowMZD\")","title":"Getting started"},{"location":"#sending-a-text-message","text":"client.send_message(recipient_id=\"2157136727638083\", text=\"hello world!\")","title":"Sending a Text Message"},{"location":"#sending-quick-replies","text":"from fbotics.models.quick_reply import QuickReply qr1 = QuickReply({\"content_type\": \"text\", \"title\": \"Yes\", \"payload\": \"payload1\", \"image_url\": \"http://i64.tinypic.com/1hothh.png\"}) qr2 = QuickReply({\"content_type\": \"text\", \"title\": \"No\", \"payload\": \"payload2\", \"image_url\": \"http://i63.tinypic.com/2pqpbth.png\"}) quick_replies = [qr1, qr2] response = client.send_message( recipient_id=2157136727638083, text=\"Text Message with Quick Replies\", quick_replies=quick_replies)","title":"Sending Quick Replies"},{"location":"#installation","text":"You can install the latest version of FBotics using pip: pip install fbotics You can also install FBotics from GitHub source: First, clone FBotics using git : git clone git@github.com:pasmod/fbotics.git Then, cd to the project folder and run the install command: cd fbotics pip install .","title":"Installation"},{"location":"#development-testing","text":"Before developing FBotics further, please install Docker. For building the Docker image and installing all dependencies of FBotics, run: cd fbotics make build Then execute the following command to run all the components required to work on FBotics: cd fbotics make up To execute the tests: make test To create coverage report: make coverage","title":"Development &amp; Testing"},{"location":"buttons/","text":"These buttons allow you to easily offer the message recipient actions they can take in response to the template, such as opening the Messenger webview, starting a payment flow, sending a postback message to your webhook, and more. [source] WebUrlButton schematics.models.WebUrlButton(raw_data=None, trusted_data=None, deserialize_mapping=None, init=True, partial=True, strict=True, validate=False, app_data=None, lazy=False) The URL Button opens a webpage in the Messenger webview. This button can be used with the Button and Generic Templates. Arguments type : Type of button, which is web_url. title : Button title. 20 character limit. webview_height_ratio : Optional. Height of the Webview. Valid values: compact, tall, full. Defaults to full. url : This URL is opened in a mobile browser when the button is tapped. Must use HTTPS protocol if messenger_extensions is true. Examples WebUrlButton from fbotics.models.buttons import WebUrlButton WebUrlButton(dict(title=\"hello\", url=\"http://www.google.de\")) [source] CallButton schematics.models.CallButton(raw_data=None, trusted_data=None, deserialize_mapping=None, init=True, partial=True, strict=True, validate=False, app_data=None, lazy=False) The call button dials a phone number when tapped. Phone number should be in the format + , e.g. +15105559999. Arguments type : Type of button, which is phone_number. title : Button title, 20 character limit. payload : Format must have \"+\" prefix followed by the country code, area code and local number. For example, +16505551234. Examples CallButton from fbotics.models.buttons import CallButton CallButton(dict(title=\"Call Representative\", payload=\"+15105551234\")) [source] PostbackButton schematics.models.PostbackButton(raw_data=None, trusted_data=None, deserialize_mapping=None, init=True, partial=True, strict=True, validate=False, app_data=None, lazy=False) The postback button sends a messaging_postbacks event to your webhook with the string set in the payload property. This allows you to take an arbitrary actions when the button is tapped. For example, you might display a list of products, then send the product ID in the postback to your webhook, where it can be used to query your database and return the product details as a structured message. Arguments type : Type of button, which is postback. title : Button title. 20 character limit. payload : This data will be sent back to your webhook. 1000 character limit. Examples CallButton from fbotics.models.buttons import PostbackButton PostbackButton(dict(title=\"Select Product\", payload=\"a4f8#4k3\"))","title":"Buttons"},{"location":"buttons/#weburlbutton","text":"schematics.models.WebUrlButton(raw_data=None, trusted_data=None, deserialize_mapping=None, init=True, partial=True, strict=True, validate=False, app_data=None, lazy=False) The URL Button opens a webpage in the Messenger webview. This button can be used with the Button and Generic Templates. Arguments type : Type of button, which is web_url. title : Button title. 20 character limit. webview_height_ratio : Optional. Height of the Webview. Valid values: compact, tall, full. Defaults to full. url : This URL is opened in a mobile browser when the button is tapped. Must use HTTPS protocol if messenger_extensions is true. Examples WebUrlButton from fbotics.models.buttons import WebUrlButton WebUrlButton(dict(title=\"hello\", url=\"http://www.google.de\")) [source]","title":"WebUrlButton"},{"location":"buttons/#callbutton","text":"schematics.models.CallButton(raw_data=None, trusted_data=None, deserialize_mapping=None, init=True, partial=True, strict=True, validate=False, app_data=None, lazy=False) The call button dials a phone number when tapped. Phone number should be in the format + , e.g. +15105559999. Arguments type : Type of button, which is phone_number. title : Button title, 20 character limit. payload : Format must have \"+\" prefix followed by the country code, area code and local number. For example, +16505551234. Examples CallButton from fbotics.models.buttons import CallButton CallButton(dict(title=\"Call Representative\", payload=\"+15105551234\")) [source]","title":"CallButton"},{"location":"buttons/#postbackbutton","text":"schematics.models.PostbackButton(raw_data=None, trusted_data=None, deserialize_mapping=None, init=True, partial=True, strict=True, validate=False, app_data=None, lazy=False) The postback button sends a messaging_postbacks event to your webhook with the string set in the payload property. This allows you to take an arbitrary actions when the button is tapped. For example, you might display a list of products, then send the product ID in the postback to your webhook, where it can be used to query your database and return the product details as a structured message. Arguments type : Type of button, which is postback. title : Button title. 20 character limit. payload : This data will be sent back to your webhook. 1000 character limit. Examples CallButton from fbotics.models.buttons import PostbackButton PostbackButton(dict(title=\"Select Product\", payload=\"a4f8#4k3\"))","title":"PostbackButton"},{"location":"fbotics/","text":"Usage of FBotics Client The Send API is the main API used to send messages to users, including text, attachments, structured message templates, sender actions, and more. FBotics implements a client to ease the use of the Send API in Python. In order to create an instance of the Client, a page access token is needed. from fbotics import Client client = Client(page_access_token=\"PAGE_ACCESS_TOKEN\") Methods send_message send_message(recipient_id=None, text=None, user_ref=None, phone_number=None, quick_replies=None, attachment=None) Sends a message to a given recipient. Arguments recipient_id : page specific id of the recipient text : message to be sent to the recipient user_ref : optional. user_ref from the checkbox plugin phone_number : Optional. Phone number of the recipient with the format +1(212)555-2368. Your bot must be approved for Customer Matching to send messages this way. quick_replies : An array of objects the describe the quick reply buttons to send. A maximum of 11 quick replies are supported. Examples Sending a Text Message client.send_text_message(recipient_id=\"2157136727638083\", text=\"hello world!\") client.send_text_message(phone_number=\"+1 (555) 857-6309\", text=\"hello world!\") client.send_text_message(user_ref=\"<UNIQUE_REF_PARAM>\", text=\"hello world!\") Sending Quick Replies from fbotics.models.quick_reply import QuickReply qr1 = QuickReply({\"content_type\": \"text\", \"title\": \"Yes\", \"payload\": \"payload1\", \"image_url\": \"http://i64.tinypic.com/1hothh.png\"}) qr2 = QuickReply({\"content_type\": \"text\", \"title\": \"No\", \"payload\": \"payload2\", \"image_url\": \"http://i63.tinypic.com/2pqpbth.png\"}) quick_replies = [qr1, qr2] response = client.send_message(recipient_id=2157136727638083, text=\"Text Message with Quick Replies\", quick_replies=quick_replies) retrieve_supported_tags retrieve_supported_tags() Retrieves the supported tags by Facebook. Examples client.retrieve_supported_tags()","title":"Send API"},{"location":"fbotics/#usage-of-fbotics-client","text":"The Send API is the main API used to send messages to users, including text, attachments, structured message templates, sender actions, and more. FBotics implements a client to ease the use of the Send API in Python. In order to create an instance of the Client, a page access token is needed. from fbotics import Client client = Client(page_access_token=\"PAGE_ACCESS_TOKEN\")","title":"Usage of FBotics Client"},{"location":"fbotics/#methods","text":"","title":"Methods"},{"location":"fbotics/#send_message","text":"send_message(recipient_id=None, text=None, user_ref=None, phone_number=None, quick_replies=None, attachment=None) Sends a message to a given recipient. Arguments recipient_id : page specific id of the recipient text : message to be sent to the recipient user_ref : optional. user_ref from the checkbox plugin phone_number : Optional. Phone number of the recipient with the format +1(212)555-2368. Your bot must be approved for Customer Matching to send messages this way. quick_replies : An array of objects the describe the quick reply buttons to send. A maximum of 11 quick replies are supported. Examples Sending a Text Message client.send_text_message(recipient_id=\"2157136727638083\", text=\"hello world!\") client.send_text_message(phone_number=\"+1 (555) 857-6309\", text=\"hello world!\") client.send_text_message(user_ref=\"<UNIQUE_REF_PARAM>\", text=\"hello world!\") Sending Quick Replies from fbotics.models.quick_reply import QuickReply qr1 = QuickReply({\"content_type\": \"text\", \"title\": \"Yes\", \"payload\": \"payload1\", \"image_url\": \"http://i64.tinypic.com/1hothh.png\"}) qr2 = QuickReply({\"content_type\": \"text\", \"title\": \"No\", \"payload\": \"payload2\", \"image_url\": \"http://i63.tinypic.com/2pqpbth.png\"}) quick_replies = [qr1, qr2] response = client.send_message(recipient_id=2157136727638083, text=\"Text Message with Quick Replies\", quick_replies=quick_replies)","title":"send_message"},{"location":"fbotics/#retrieve_supported_tags","text":"retrieve_supported_tags() Retrieves the supported tags by Facebook. Examples client.retrieve_supported_tags()","title":"retrieve_supported_tags"}]}